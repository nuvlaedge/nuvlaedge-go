name: "Release"

on:
  push:
    branches:
      - master
      - main
      - release/*

jobs:
  trigger-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - id: release
        uses: googleapis/release-please-action@v4.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target-branch: ${{ github.ref_name }}
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json

  publish-release:
    name: "Build and Publish NuvlaEdge"
    needs: trigger-release
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64, arm]
        # Darwin does not support arm(32) architecture. We need to build it to support small arm devices.
#        include:
#          - os: linux
#            arch: arm

    steps:
      - uses: actions/checkout@v4

      - name: "Set up Go"
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.0
          cache: true

      - name: "Build and Publish"
        id: build
        run: |
          export FILE_NAME="nuvlaedge-${{ matrix.os }}-${{ matrix.arch }}-${{ needs.trigger-release.outputs.tag_name }}"
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          go build -o $FILE_NAME -gcflags=all="-l -B" -ldflags="-s -w -X 'nuvlaedge-go/nuvlaedge/version.Version=${{ needs.trigger-release.outputs.tag_name }}'" ./cmd/cli.go
          echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT

      - name: Install UPX
        if: matrix.os == 'linux'
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Compress binaries
        if: matrix.os == 'linux'
        run: |
          upx --best --lzma ${{ steps.build.outputs.file_name }}

      - name: Add artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading artifacts to release ${{ needs.trigger-release.outputs.tag_name }}"
          gh release upload ${{ needs.trigger-release.outputs.tag_name }} ${{ steps.build.outputs.file_name }}

  publish-config-template:
    name: "Publish NuvlaEdge Config Template"
    needs: trigger-release
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Add artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading artifacts to release ${{ needs.trigger-release.outputs.tag_name }}"
          gh release upload ${{ needs.trigger-release.outputs.tag_name }} config/template.toml
          gh release upload ${{ needs.trigger-release.outputs.tag_name }} installer/get-ne.sh
          gh release upload ${{ needs.trigger-release.outputs.tag_name }} installer/nuvlaedge.service

  publish-docker-hub:
    name: "Publish NuvlaEdge Docker Image"
    needs: trigger-release
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ------------------------------------------------
      # Setup Docker ad Qemu
      # ------------------------------------------------
      - name: SetUp QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm
          build-args: |
            NUVLAEDGE_VERSION=${{ needs.trigger-release.outputs.tag_name }}
          push: true
          tags: >
            nuvladev/${{ github.event.repository.name }}:latest,
            nuvladev/${{ github.event.repository.name }}:${{ needs.trigger-release.outputs.tag_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


